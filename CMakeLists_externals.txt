#
# cmake file for external libraries like qcustomplot
# @author Tobias Weber <tweber@ill.fr>
# @date feb-2021
# @license GPLv3, see 'LICENSE' file
#
# -----------------------------------------------------------------------------
# TAS-Paths (part of the Takin software suite)
# Copyright (C) 2021  Tobias WEBER (Institut Laue-Langevin (ILL),
#                     Grenoble, France).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# -----------------------------------------------------------------------------
#

cmake_minimum_required(VERSION 3.5)

project(taspaths_externals)
enable_language(CXX)


list(APPEND CMAKE_MODULE_PATH
	"${PROJECT_SOURCE_DIR}"
	"${PROJECT_SOURCE_DIR}/cmake"
	"${PROJECT_SOURCE_DIR}/tlibs2/cmake"
)

option(USE_QT6 "use qt 6" FALSE)


if(NOT "${CMAKE_BUILD_TYPE}" STREQUAL "Release")
	set(CMAKE_VERBOSE_MAKEFILE TRUE)
endif()


if(USE_QT6)
	set(QT_VER 6)
else()
	set(QT_VER 5)
endif()


message("Build type: ${CMAKE_BUILD_TYPE}.")
message("Compiler: " ${CMAKE_CXX_COMPILER_ID}.)
message("Selected Qt version ${QT_VER}.")


set(WARN_OPTS -Wall -Wextra)
add_compile_options(${WARN_OPTS})


if(CMAKE_BUILD_TYPE STREQUAL "Debug")
	# generate debug symbols
	add_compile_options(-g -ggdb)

elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
	add_compile_options("-DNDEBUG")
endif()


# -----------------------------------------------------------------------------
# compiler settings
# -----------------------------------------------------------------------------
set(CMAKE_CXX_STANDARD 20)
add_compile_options(-std=c++20)
# -----------------------------------------------------------------------------


# -----------------------------------------------------------------------------
# system specific settings
# -----------------------------------------------------------------------------
message("Building for ${CMAKE_SYSTEM_NAME} systems.")

set(MINGW_WINSOCK)

if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
	# pass linker --subsystem option
	add_compile_options(-Wl,--subsystem,windows)

	set(MINGW_WINSOCK "ws2_32")
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
	#add_compile_options(-mmacosx-version-min=10.15)
	add_compile_options(-mmacosx-version-min=11.0)
endif()

include_directories("${PROJECT_SOURCE_DIR}")
include_directories(SYSTEM "${PROJECT_SOURCE_DIR}/externals")

if(QT_VER EQUAL 6)
	include_directories("${Qt6Core_INCLUDE_DIRS}/..")
elseif(QT_VER EQUAL 5)
	include_directories("${Qt5Core_INCLUDE_DIRS}/..")
endif()
# -----------------------------------------------------------------------------


# -----------------------------------------------------------------------------
# packages
# -----------------------------------------------------------------------------
if(QT_VER EQUAL 6)
	find_package(Qt6 REQUIRED
		COMPONENTS Core Gui Svg Widgets
			OpenGL OpenGLWidgets
			PrintSupport)
elseif(QT_VER EQUAL 5)
	find_package(Qt5 REQUIRED
		COMPONENTS Core Gui Svg Widgets OpenGL
			PrintSupport)
else()
	message(FATAL_ERROR "Unknown Qt version selected: ${QT_VER}")
endif()

set(CMAKE_AUTOUIC TRUE)
set(CMAKE_AUTOMOC TRUE)
# -----------------------------------------------------------------------------


# -----------------------------------------------------------------------------
# more compiler settings
# -----------------------------------------------------------------------------
#add_definitions(-DQCUSTOMPLOT_USE_OPENGL)
# -----------------------------------------------------------------------------


# -----------------------------------------------------------------------------
# target library settings
# -----------------------------------------------------------------------------
# make a 3rd party qcustomplot library
add_library(qcustomplot SHARED
	qcustomplot/qcustomplot.cpp qcustomplot/qcustomplot.h
)

set_property(TARGET qcustomplot
	PROPERTY POSITION_INDEPENDENT_CODE True)

if(QT_VER EQUAL 6)
	target_link_libraries(qcustomplot
		Qt6::Core Qt6::Gui Qt6::Widgets
		#Qt6::OpenGL Qt6::OpenGLWidgets
		Qt6::PrintSupport
	)
elseif(QT_VER EQUAL 5)
	target_link_libraries(qcustomplot
		Qt5::Core Qt5::Gui Qt5::Widgets
		#Qt5::OpenGL
		Qt5::PrintSupport
	)
endif()
# -----------------------------------------------------------------------------
